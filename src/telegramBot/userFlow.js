const bot = require('../config/botConfig');
const { SHEETS, RANGES } = require('../constants');
const {
  isUserRegistered,
  getWarehouseResponsibleChatIds,
} = require('../googleSheets/users');
const { getWarehouses } = require('../googleSheets/warehouses');
const { getSheetsClient } = require('../googleSheets/auth');
const { updateGoogleSheet } = require('../googleSheets/update');
const {
  sendToOperator1C,
  sendToAdmin,
  getApprovedUsers,
  activeRequests,
} = require('../googleSheets/operators');

const spreadSheetID = process.env.SPREADSHEET_ID;
const userStates = {}; // –û–±'—î–∫—Ç –¥–ª—è —Ç–∏–º—á–∞—Å–æ–≤–æ–≥–æ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
const activeRequestsOut = new Map(); // –ó–±–µ—Ä–µ–∂–µ–º–æ —Ç—É—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–¥–∞—á—ñ
const activeRequestsIn = new Map(); // –ó–±–µ—Ä–µ–∂–µ–º–æ —Ç—É—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è

// –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start
async function handleStart(msg) {
  const chatId = msg.chat.id;
  const telegramID = msg.from.id;

  if (await isUserRegistered(telegramID)) {
    bot.sendMessage(chatId, `‚úÖ –í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –≤ —Å–∏—Å—Ç–µ–º—ñ.\nüë§ –í–∞—à ID: ${telegramID}`);
    return;
  }

  bot.sendMessage(chatId, 'üëã –í—ñ—Ç–∞—é! –í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î –ø—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ —ñ–º‚Äô—è:');
  userStates[chatId] = { step: 'awaiting_name' };
}

//–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
function formatTransferMessage(transfer) {
  const {
    rowIndex,
    date,
    inicUser,
    from,
    to,
    code,
    name,
    quantity,
    status = ''
  } = transfer;

  return `
${inicUser} –æ—Ñ–æ—Ä–º–∏–≤ –∑–∞–ø–∏—Ç ‚Ññ${rowIndex}

–ó: ${from}
–ù–∞: ${to}
–ö–æ–¥ 1–°: ${code}
–ù–∞–∑–≤–∞: ${name}
–ö-—Å—Ç—å: ${quantity}
`.trim();
}

//–û—Ç—Ä–∏–º—É—î–º–æ —Å–∫–ª–∞–¥–∏ –∑–∞ —è–∫—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
async function getWarehousesByUser(telegramID) {
  const sheets = await getSheetsClient();
  const data = await sheets.spreadsheets.values.get({
    spreadsheetId: spreadSheetID,
    range: RANGES.WAREHOUSES_ALL,
  });

  const rows = data.data.values || [];

  const warehouses = rows.reduce((acc, row) => {
    const warehouseName = row[0];
    const responsibleIDs = row.slice(2);
    if (responsibleIDs.includes(String(telegramID))) {
      acc.push(warehouseName);
    }
    return acc;
  }, []);

  return warehouses;
}

// –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /orderOut - –≤—Å—ñ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –±–µ–∑ —Å—Ç–∞—Ç—É—Å—É
async function handleOrderOut(msg) {
  const chatId = msg.chat.id;
  const telegramID = msg.from.id;

  if (!(await isUserRegistered(telegramID))) {
    return bot.sendMessage(chatId, '–í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ.');
  }

  const warehouses = await getWarehousesByUser(telegramID);
  const transfers = await getTransfersByStatus(warehouses, "");

  if (!transfers.length) {
    return bot.sendMessage(chatId, '–ù–µ–º–∞—î –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –ø–µ—Ä–µ–º—ñ—â–µ–Ω—å.');
  }

  for (const transfer of transfers) {
    const message = formatTransferMessage(transfer);

    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data: `confirmOut_${transfer.rowIndex}` },
            { text: "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data: `cancelOut_${transfer.rowIndex}` }
          ]
        ]
      },
      parse_mode: "HTML",
      disable_web_page_preview: true
    };
    await bot.sendMessage(chatId, message, keyboard);
  }

}

// –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /orderIn - –≤—Å—ñ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º "–ü–µ—Ä–µ–¥–∞–Ω–æ"
async function handleOrderIn(msg) {
  const chatId = msg.chat.id;
  const telegramID = msg.from.id;

  if (!(await isUserRegistered(telegramID))) {
    return bot.sendMessage(chatId, '–í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ.');
  }

  const warehouses = await getWarehousesByUser(telegramID);
  const transfers = await getTransfersByStatus(warehouses, "–ü–µ—Ä–µ–¥–∞–Ω–æ", "in");

  if (!transfers.length) {
    return bot.sendMessage(chatId, '–ù–µ–º–∞—î –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –ø–µ—Ä–µ–º—ñ—â–µ–Ω—å.');
  }

  for (const transfer of transfers) {
    const message = formatTransferMessage(transfer);

    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data: `confirmIn_${transfer.rowIndex}` },
            { text: "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data: `cancelIn_${transfer.rowIndex}` }
          ]
        ]
      },
      parse_mode: "HTML",
      disable_web_page_preview: true
    };

    await bot.sendMessage(chatId, message, keyboard);
  }
}

//–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤—Å—ñ—Ö –ø–µ—Ä–µ–º—ñ—â–µ–Ω—å –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Å—Ç–∞—Ç—É—Å—É out / in
async function getTransfersByStatus(warehouses, status, direction = "out") {
  const sheets = await getSheetsClient();
  const response = await sheets.spreadsheets.values.get({
    spreadsheetId: spreadSheetID,
    range: RANGES.TRANSFERS_ALL,
  });

  const rows = response.data.values || [];

  // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ä—è–¥–∫–∏, –∞ –æ–±'—î–∫—Ç–∏ –∑ —Ä—è–¥–∫–æ–º
  const transfers = [];

  rows.forEach((row, index) => {
    const fromWarehouse = row[2]; // –°—Ç–æ–≤–ø–µ—Ü—å C
    const toWarehouse = row[3];   // –°—Ç–æ–≤–ø–µ—Ü—å D
    const rowStatus = row[8];     // –°—Ç–æ–≤–ø–µ—Ü—å I

    const match =
      (direction === "out" && warehouses.includes(fromWarehouse) && (!rowStatus || rowStatus.trim() === status)) ||
      (direction === "in" && warehouses.includes(toWarehouse) && rowStatus && rowStatus.trim() === status);

    if (match) {
      transfers.push({
        rowIndex: index + 2, // Google Sheets –º–∞—î 1-based —ñ–Ω–¥–µ–∫—Å–∞—Ü—ñ—é
        date: row[0] || '',
        inicUser: row[1] || '–ê–Ω–æ–Ω—ñ–º',
        from: fromWarehouse || '',
        to: toWarehouse || '',
        code: row[4] || '',
        name: row[5] || '',
        quantity: row[6] || '',
        status: rowStatus || '',
      });
    }
  });

  return transfers;
}


// –û–±—Ä–æ–±–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–æ–≥–æ —ñ–º–µ–Ω—ñ
async function getUserName(msg) {
  const chatId = msg.chat.id;
  const text = msg.text;

  if (!userStates[chatId]) return;

  if (userStates[chatId].step === 'awaiting_name') {
    userStates[chatId].name = text;
    userStates[chatId].step = 'awaiting_warehouse';

    const warehouses = await getWarehouses(); // –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥—ñ–≤

    if (warehouses.length === 0) {
      bot.sendMessage(chatId, '‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Å–∫–ª–∞–¥—ñ–≤.');
      delete userStates[chatId];
      return;
    }

    // –§–æ—Ä–º—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –∑ –∫–æ—Ä–æ—Ç–∫–∏–º–∏ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞–º–∏ —Å–∫–ª–∞–¥—ñ–≤
    const keyboard = {
      reply_markup: {
        inline_keyboard: warehouses.map(({ fullName, shortCode }) => {
          return [
            {
              text: fullName, // –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ - —Ü–µ –ø–æ–≤–Ω–µ —ñ–º'—è —Å–∫–ª–∞–¥—É
              callback_data: 'warehouse_' + shortCode, // Callback data - —Ü–µ —Å–∫–æ—Ä–æ—á–µ–Ω–µ —ñ–º'—è —Å–∫–ª–∞–¥—É
            },
          ];
        }),
      },
    };

    bot.sendMessage(
      chatId,
      'üì¶ –û–±–µ—Ä—ñ—Ç—å —Å–∫–ª–∞–¥, –∑–∞ —è–∫–∏–π –≤–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î—Ç–µ:',
      keyboard
    );
  }
}

//–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Å–∫–ª–∞–¥—É
async function choiceWarehouse(query) {
  const chatId = query.message.chat.id;
  const telegramID = query.from.id;
  const username = query.from.username || '–ë–µ–∑ username';
  const callbackData = decodeURIComponent(query.data);

  if (!userStates[chatId] || !callbackData) return;

  const shortCode = callbackData.replace('warehouse_', ''); // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ callbackData –±–µ–∑ 'warehouse_' –ø–µ—Ä–µ–¥ –ø—Ä–µ—Ñ—ñ–∫—Å–æ–º
  const userFullName = userStates[chatId].name;

  // –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥—ñ–≤
  const warehouses = await getWarehouses();

  // –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Å–∫–ª–∞–¥ –∑–∞ –∫–æ—Ä–æ—Ç–∫–∏–º –∫–æ–¥–æ–º
  const warehouse = warehouses.find((w) => w.shortCode === shortCode)?.fullName;

  if (!warehouse) {
    bot.sendMessage(chatId, '‚ùå –°–∫–ª–∞–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');
    return;
  }

  const sheets = await getSheetsClient();

  // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ Google Sheets
  try {
    await sheets.spreadsheets.values.append({
      spreadsheetId: spreadSheetID,
      range: SHEETS.USERS,
      valueInputOption: 'RAW',
      insertDataOption: 'INSERT_ROWS',
      resource: {
        values: [[telegramID, username, userFullName, warehouse]], // –ó–∞–ø–∏—Å—É—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ, –≤–∫–ª—é—á–∞—é—á–∏ —Å–∫–ª–∞–¥
      },
    });

    const message = `üìÑ –î–æ–¥–∞–Ω–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:\n${userFullName}\nUserName: ${username}\nUserId: ${telegramID}\n–°–∫–ª–∞–¥: ${warehouse}`;
    sendToAdmin(message);

    bot.sendMessage(
      chatId,
      `–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\nüë§ –Ü–º'—è: ${userFullName}\nüë§ ID: ${chatId}\nüì¶ –°–∫–ª–∞–¥: ${warehouse}`
    );
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É –≤ Google Sheets:', error);
    bot.sendMessage(
      chatId,
      '‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.'
    );
  }

  delete userStates[chatId]; // –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–æ–º—É, —è–∫–∏–π –ø–µ—Ä–µ–¥–∞—î
async function sendTelegramMessage(rowId) {
  const sheets = await getSheetsClient();

  const res = await sheets.spreadsheets.values.get({
    spreadsheetId: spreadSheetID,
    range: RANGES.TRANSFERS_ROW(rowId), // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä—è–¥–∫–∞
  });

  const row = res.data.values[0]; // –û—Å—Ç–∞–Ω–Ω—ñ–π —Ä—è–¥–æ–∫ –∑ —Ç–∞–±–ª–∏—Ü—ñ
  const message = `‚ö†Ô∏è –û—Ñ–æ—Ä–º–ª–µ–Ω–æ –∑–∞–ø–∏—Ç <a href="${RANGES.CELLLINK}${rowId}">‚Ññ${rowId}</a> –Ω–∞ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è.\n\n–ó—ñ —Å–∫–ª–∞–¥—É: ${row[2]}\n–ù–∞ —Å–∫–ª–∞–¥: ${row[3]}\n–ö–æ–¥ 1–°: ${row[4]}\n–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞: ${row[5]}\n–ö—ñ–ª—å–∫—ñ—Å—Ç—å: ${row[6]}\n\n`;

  const warehouseFrom = row[2]; // –°–∫–ª–∞–¥, –∑ —è–∫–æ–≥–æ –ø–µ—Ä–µ–º—ñ—â—É—î—Ç—å—Å—è –¢–ú–¶
  const chatIdList = await getWarehouseResponsibleChatIds(warehouseFrom);
  const approvedUsers = await getApprovedUsers(); // –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∞–ø—Ä—É–≤–Ω—É—Ç–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤

  if (chatIdList.length === 0) {
    console.log(
      `‚ö†Ô∏è –ù–µ–º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–∏—Ö –∑–∞ —Å–∫–ª–∞–¥ ${warehouseFrom}, –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ.`
    );
    return;
  }

  for (const chatId of chatIdList) {
    if (!approvedUsers.includes(chatId.toString())) {
      continue; // –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó —ñ—Ç–µ—Ä–∞—Ü—ñ—ó, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–ø—Ä—É–≤–Ω—É—Ç–∏–π
    }

    try {
      const sentMessage = await bot.sendMessage(chatId, message, {
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [
              { text: '‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏', callback_data: 'confirmOut_' + rowId },
              { text: '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏', callback_data: 'cancelOut_' + rowId },
            ],
          ],
        },
      });
  
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
      if (!activeRequestsOut.has(rowId)) {
        activeRequestsOut.set(rowId, []);
      }
      activeRequestsOut
        .get(rowId)
        .push({ chatId: chatId, messageId: sentMessage.message_id });
    } catch(error){
      console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è chatId ${chatId}:`, error.message);
      continue; // –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É —Å–ø–∏—Å–∫—É
    }
  }
}
// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–æ–º—É, —è–∫–∏–π –æ—Ç—Ä–∏–º—É—î
async function sendToUserIn(rowId) {
  const sheets = await getSheetsClient();

  const res = await sheets.spreadsheets.values.get({
    spreadsheetId: spreadSheetID,
    range: RANGES.TRANSFERS_ROW(rowId), // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä—è–¥–∫–∞
  });

  const row = res.data.values[0]; // –û—Å—Ç–∞–Ω–Ω—ñ–π —Ä—è–¥–æ–∫ –∑ —Ç–∞–±–ª–∏—Ü—ñ
  const message = `‚ö†Ô∏è –û—Ñ–æ—Ä–º–ª–µ–Ω–æ –∑–∞–ø–∏—Ç <a href="${RANGES.CELLLINK}${rowId}">‚Ññ${rowId}</a> –Ω–∞ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è.\n\n–ó—ñ —Å–∫–ª–∞–¥—É: ${row[2]}\n–ù–∞ —Å–∫–ª–∞–¥: ${row[3]}\n–ö–æ–¥ 1–°: ${row[4]}\n–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞: ${row[5]}\n–ö—ñ–ª—å–∫—ñ—Å—Ç—å: ${row[6]}\n\n`;

  const warehouseFrom = row[3]; // –°–∫–ª–∞–¥, –∑ —è–∫–æ–≥–æ –ø–µ—Ä–µ–º—ñ—â—É—î—Ç—å—Å—è –¢–ú–¶
  const chatIdList = await getWarehouseResponsibleChatIds(warehouseFrom);
  const approvedUsers = await getApprovedUsers(); // –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∞–ø—Ä—É–≤–Ω—É—Ç–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤

  if (chatIdList.length === 0) {
    console.log(
      `‚ö†Ô∏è –ù–µ–º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–∏—Ö –∑–∞ —Å–∫–ª–∞–¥ ${warehouseFrom}, –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ.`
    );
    return;
  }

  for (const chatId of chatIdList) {
    if (!approvedUsers.includes(chatId.toString())) {
      continue; // –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó —ñ—Ç–µ—Ä–∞—Ü—ñ—ó, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–ø—Ä—É–≤–Ω—É—Ç–∏–π
    }

    try {
      const sentMessage = await bot.sendMessage(chatId, message, {
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [
              { text: '‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏', callback_data: 'confirmIn_' + rowId },
              { text: '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏', callback_data: 'cancelIn_' + rowId },
            ],
          ],
        },
      });
  
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
      if (!activeRequestsIn.has(rowId)) {
        activeRequestsIn.set(rowId, []);
      }
      activeRequestsIn
        .get(rowId)
        .push({ chatId: chatId, messageId: sentMessage.message_id });
    } catch(error){
      console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è chatId ${chatId}:`, error.message);
      continue; // –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É —Å–ø–∏—Å–∫—É
    }
  }
}

// –†–µ–∞–∫—Ü—ñ—è –∞–Ω –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫
async function buttonReaction(query) {
  const data = query.data;
  const messageId = query.message.message_id;
  const chatId = query.message.chat.id;
  const rowId = data.split('_')[1];
  let newText = '';
  const firstName = query.from.first_name || '';
  const lastName = query.from.last_name || '';
  const userName = query.from.username || `${firstName} ${lastName}`.trim();
  
 async function deleteDuplicates(step, newText) {
    const messages = step === 'out' 
    ? activeRequestsOut.get(Number(rowId)) || [] 
    : activeRequestsIn.get(rowId) || [];

    for (const msg of messages) {
      if (Number(msg.chatId) !== Number(chatId)) {
        try {
          await bot.editMessageText(newText, {
            chat_id: msg.chatId,
            message_id: msg.messageId,
            parse_mode: 'HTML',
            reply_markup: { inline_keyboard: [] }, // –í–∏–¥–∞–ª—è—î–º–æ –∫–Ω–æ–ø–∫–∏ —Ä–∞–∑–æ–º –∑ —Ç–µ–∫—Å—Ç–æ–º
          });
        } catch (error) {
          console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', error);
        }
      }
    }
 }

  if (data.startsWith('confirmOut_')) {
    newText = `‚úÖ –ó–∞–ø–∏—Ç <a href="${RANGES.CELLLINK}${rowId}">‚Ññ${rowId}</a> –ø–µ—Ä–µ–¥–∞–Ω–æ @${userName}`;
    await updateGoogleSheet(rowId, '–ü–µ—Ä–µ–¥–∞–Ω–æ', 'J', userName); // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –≤ Google –¢–∞–±–ª–∏—Ü—ñ
    //await deleteDuplicates('out', newText);
    //await sendToUserIn(rowId);
  } else if (data.startsWith('cancelOut_')) {
    newText = `‚ùå –ó–∞–ø–∏—Ç <a href="${RANGES.CELLLINK}${rowId}">‚Ññ${rowId}</a> —Å–∫–∞—Å–æ–≤–∞–Ω–æ @${userName}`;
    await updateGoogleSheet(rowId, '–°–∫–∞—Å–æ–≤–∞–Ω–æ', 'J', userName); // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –≤ Google –¢–∞–±–ª–∏—Ü—ñ
    //await deleteDuplicates('out', newText);
  } else if (data.startsWith('confirmIn_')) {
    newText = `‚úÖ –ó–∞–ø–∏—Ç <a href="${RANGES.CELLLINK}${rowId}">‚Ññ${rowId}</a> –æ—Ç—Ä–∏–º–∞–Ω–æ @${userName}`;
    await updateGoogleSheet(rowId, '–û—Ç—Ä–∏–º–∞–Ω–æ', 'K', userName); // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –≤ Google –¢–∞–±–ª–∏—Ü—ñ
    //await deleteDuplicates('in', newText);
    //await sendToOperator1C(rowId);
  } else if (data.startsWith('cancelIn_')) {
    newText = `‚ùå –ó–∞–ø–∏—Ç <a href="${RANGES.CELLLINK}${rowId}">‚Ññ${rowId}</a> —Å–∫–∞—Å–æ–≤–∞–Ω–æ @${userName}`;
    await updateGoogleSheet(rowId, '–°–∫–∞—Å–æ–≤–∞–Ω–æ', 'K', userName); // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –≤ Google –¢–∞–±–ª–∏—Ü—ñ
    //await deleteDuplicates('in', newText);
  } else if (data.startsWith('processed_')) {
    newText = `‚úÖ –ó–∞–ø–∏—Ç <a href="${RANGES.CELLLINK}${rowId}">‚Ññ${rowId}</a> –ø—Ä–æ–≤–µ–¥–µ–Ω–æ @${userName}`;
    await updateGoogleSheet(rowId, '–ü—Ä–æ–≤–µ–¥–µ–Ω–æ', 'L', userName); // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –≤ Google –¢–∞–±–ª–∏—Ü—ñ
  } else if (data.startsWith('warehouse_')) {
    newText = `‚úÖ –°–∫–ª–∞–¥ –æ–±—Ä–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ`;
    await choiceWarehouse(query); // –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Google –¢–∞–±–ª–∏—Ü—ñ + –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ TG
    return;
  } else if (data.startsWith('take_')) {
    newText = `‚ö†Ô∏è –í–∏ –ø—Ä–∏–π–Ω—è–ª–∏ –∑–∞–ø–∏—Ç <a href="https://docs.google.com/spreadsheets/d/${spreadSheetID}/edit?gid=1943639393#gid=1943639393&range=E${rowId}">‚Ññ${rowId}</a> –≤ —Ä–æ–±–æ—Ç—É`;
    await updateGoogleSheet(rowId, '–í –æ–±—Ä–æ–±—Ü—ñ', 'L', userName); // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –≤ Google –¢–∞–±–ª–∏—Ü—ñ
    const messages = activeRequests.get(rowId) || []; // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ –±—É–ª–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º
    for (const msg of messages) {
      if (Number(msg.chatId) !== chatId) {
        try {
          await bot.deleteMessage(msg.chatId, msg.messageId);
        } catch (err) {
          console.error('–ü–æ–º–∏–ª–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', err);
        }
      } else {
        try {
          await bot.editMessageText(newText, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'HTML',
            reply_markup: {
              inline_keyboard: [
                [{ text: '‚úÖ –ü—Ä–æ–≤–µ–¥–µ–Ω–æ', callback_data: `processed_${rowId}` }],
              ],
            },
          });
        } catch (error) {
          console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', error);
        }
      }
    }
    return;
  }

  try {
    await bot.editMessageText(newText, {
      chat_id: chatId,
      message_id: messageId,
      parse_mode: "HTML",
      reply_markup: { inline_keyboard: [] }, // –í–∏–¥–∞–ª—è—î–º–æ –∫–Ω–æ–ø–∫–∏ —Ä–∞–∑–æ–º –∑ —Ç–µ–∫—Å—Ç–æ–º
    });
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', error);
  }
}

module.exports = {
  handleStart,
  handleOrderOut,
  handleOrderIn,
  getUserName,
  choiceWarehouse,
  sendTelegramMessage,
  buttonReaction,
};

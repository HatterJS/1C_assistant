require('dotenv').config(); // –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ dotenv –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ .env
const TelegramBot = require('node-telegram-bot-api');
const { google } = require('googleapis');
//const { JWT } = require("google-auth-library");
//const fs = require("fs");

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è GoogleAuth –¥–ª—è –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
const auth = new google.auth.GoogleAuth({
  keyFile: 'credentials.json', // –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ —Ñ–∞–π–ª –∑ –∫–ª—é—á–∞–º–∏
  scopes: ['https://www.googleapis.com/auth/spreadsheets'], // –î–æ—Å—Ç—É–ø –¥–æ Google Sheets API
});

// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–æ—Ç–∞
const token = process.env.BOT_TOKEN;
const bot = new TelegramBot(token, { polling: true });

// –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª—ñ—î–Ω—Ç –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Google Sheets
async function getSheetsClient() {
  const authClient = await auth.getClient();
  return google.sheets({ version: 'v4', auth: authClient });
}

//–ü–æ—Å—Ç—ñ–π–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
const SPREADSHEET_ID = '1JbQ8-VVoYAkSRAx5ssz7Yv2kbJDcZJ46TQdK6M58w8c';
const USERS_SHEET = 'Users';
const WAREHOUSE_SHEET = '–°–∫–ª–∞–¥–∏';

//------------------------------------------ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ ------------------------------>
// –û–±'—î–∫—Ç –¥–ª—è —Ç–∏–º—á–∞—Å–æ–≤–æ–≥–æ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
const userStates = {};
// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
async function isUserRegistered(telegramID) {
  const sheets = await getSheetsClient();
  const response = await sheets.spreadsheets.values.get({
    spreadsheetId: SPREADSHEET_ID,
    range: `${USERS_SHEET}!A:A`, // –ß–∏—Ç–∞—î–º–æ —Å—Ç–æ–≤–ø–µ—Ü—å TelegramID
  });
  const ids = response.data.values ? response.data.values.flat() : [];
  return ids.includes(String(telegramID));
}
// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É —Å–∫–ª–∞–¥—ñ–≤
async function getWarehouses() {
  const sheets = await getSheetsClient();
  const response = await sheets.spreadsheets.values.get({
    spreadsheetId: SPREADSHEET_ID,
    range: `${WAREHOUSE_SHEET}!A:B`, // –ß–∏—Ç–∞—î–º–æ —Å—Ç–æ–≤–ø–µ—Ü—å A —Ç–∞ B (–Ω–∞–∑–≤–∏ —Å–∫–ª–∞–¥—ñ–≤)
  });
  const warehouses = response.data.values; // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ —Ç–∞–±–ª–∏—Ü—ñ
  return warehouses.map(([fullName, shortCode]) => ({ fullName, shortCode }));
}
// –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const telegramID = msg.from.id;
  if (await isUserRegistered(telegramID)) {
    bot.sendMessage(chatId, '‚úÖ –í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –≤ —Å–∏—Å—Ç–µ–º—ñ.');
    return;
  }
  bot.sendMessage(chatId, 'üëã –í—ñ—Ç–∞—é! –í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î –ø—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ —ñ–º‚Äô—è:');
  userStates[chatId] = { step: 'awaiting_name' };
});
// –û–±—Ä–æ–±–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–æ–≥–æ —ñ–º–µ–Ω—ñ
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  if (!userStates[chatId]) return;

  if (userStates[chatId].step === 'awaiting_name') {
    userStates[chatId].name = text;
    userStates[chatId].step = 'awaiting_warehouse';

    const warehouses = await getWarehouses(); // –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥—ñ–≤

    if (warehouses.length === 0) {
      bot.sendMessage(chatId, '‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Å–∫–ª–∞–¥—ñ–≤.');
      delete userStates[chatId];
      return;
    }

    // –§–æ—Ä–º—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –∑ –∫–æ—Ä–æ—Ç–∫–∏–º–∏ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞–º–∏ —Å–∫–ª–∞–¥—ñ–≤
    const keyboard = {
      reply_markup: {
        inline_keyboard: warehouses.map(({ fullName, shortCode }) => {
          return [
            {
              text: fullName, // –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ - —Ü–µ –ø–æ–≤–Ω–µ —ñ–º'—è —Å–∫–ª–∞–¥—É
              callback_data: shortCode, // Callback data - —Ü–µ —Å–∫–æ—Ä–æ—á–µ–Ω–µ —ñ–º'—è —Å–∫–ª–∞–¥—É
            },
          ];
        }),
      },
    };

    console.log('Keyboard:', keyboard); // –õ–æ–≥—É–≤–∞–Ω–Ω—è –≤—Å—ñ—î—ó –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏

    bot.sendMessage(
      chatId,
      'üì¶ –û–±–µ—Ä—ñ—Ç—å —Å–∫–ª–∞–¥, –∑–∞ —è–∫–∏–π –≤–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î—Ç–µ:',
      keyboard
    );
  }
});

// –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Å–∫–ª–∞–¥—É
bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const telegramID = query.from.id;
  const username = query.from.username || '–ë–µ–∑ username';
  const callbackData = decodeURIComponent(query.data);

  if (!userStates[chatId] || !callbackData) return;

  const shortCode = callbackData; // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ callbackData –±–µ–∑ 'warehouse_' –ø–µ—Ä–µ–¥ –ø—Ä–µ—Ñ—ñ–∫—Å–æ–º
  const userFullName = userStates[chatId].name;

  // –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥—ñ–≤
  const warehouses = await getWarehouses();

  // –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Å–∫–ª–∞–¥ –∑–∞ –∫–æ—Ä–æ—Ç–∫–∏–º –∫–æ–¥–æ–º
  const warehouse = warehouses.find((w) => w.shortCode === shortCode)?.fullName;

  if (!warehouse) {
    bot.sendMessage(chatId, '‚ùå –°–∫–ª–∞–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');
    return;
  }

  const sheets = await getSheetsClient();

  try {
    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ Google Sheets
    await sheets.spreadsheets.values.append({
      spreadsheetId: SPREADSHEET_ID,
      range: USERS_SHEET,
      valueInputOption: 'RAW',
      insertDataOption: 'INSERT_ROWS',
      resource: {
        values: [[telegramID, username, userFullName, warehouse]], // –ó–∞–ø–∏—Å—É—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ, –≤–∫–ª—é—á–∞—é—á–∏ —Å–∫–ª–∞–¥
      },
    });

    bot.sendMessage(
      chatId,
      `–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\nüë§ –Ü–º'—è: ${userFullName}\nüì¶ –°–∫–ª–∞–¥: ${warehouse}`
    );
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É –≤ Google Sheets:', error);
    bot.sendMessage(
      chatId,
      '‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.'
    );
  }

  delete userStates[chatId]; // –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω
});

//------------------------------------------ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö —Ä—è–¥–∫—ñ–≤ ------------------------------>

// ID —Ç–∞–±–ª–∏—Ü—ñ —Ç–∞ –¥—ñ–∞–ø–∞–∑–æ–Ω
const spreadsheetId = '1JbQ8-VVoYAkSRAx5ssz7Yv2kbJDcZJ46TQdK6M58w8c';
const range = '–ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è!A1:A';

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —Ä—è–¥–∫–∞
async function getLastRow() {
  const client = await auth.getClient(); // –û—Ç—Ä–∏–º—É—î–º–æ –∫–ª—ñ—î–Ω—Ç –¥–ª—è –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
  const sheets = google.sheets({ version: 'v4', auth: client });

  const res = await sheets.spreadsheets.values.get({
    spreadsheetId,
    range,
  });

  const rows = res.data.values;
  return rows ? rows.length : 0; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—è–¥–∫—ñ–≤
}

// –ó–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ–≥–æ —Ä—è–¥–∫–∞
let lastKnownRow = 0;

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–≤–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –∑–∞–ø—É—Å–∫—É
(async () => {
  lastKnownRow = await getLastRow();
  console.log(`–û—Å—Ç–∞–Ω–Ω—ñ–π —Ä—è–¥–æ–∫ –Ω–∞ –º–æ–º–µ–Ω—Ç –∑–∞–ø—É—Å–∫—É: ${lastKnownRow}`);
})();

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–≤–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É
setInterval(async () => {
  const lastRow = await getLastRow();
  console.log(lastRow);

  if (lastRow > lastKnownRow) {
    console.log(`–ù–æ–≤–∏–π –∑–∞–ø–∏—Å –¥–æ–¥–∞–Ω–æ! –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—è–¥–∫—ñ–≤: ${lastRow}`);

    // –û–±—Ä–æ–±–∫–∞ –≤—Å—ñ—Ö –Ω–æ–≤–∏—Ö —Ä—è–¥–∫—ñ–≤
    for (let i = lastKnownRow + 1; i <= lastRow; i++) {
      console.log(`–û–±—Ä–æ–±–ª—è—î—Ç—å—Å—è —Ä—è–¥–æ–∫ ${i}`);
      // –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
      await sendTelegramMessage(i);
    }

    // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–æ—á–∫—É –≤—ñ–¥–ª—ñ–∫—É –Ω–∞ –Ω–æ–≤–∏–π –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ä—è–¥–æ–∫
    lastKnownRow = lastRow;
  }
}, 60000); // –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram
async function sendTelegramMessage(rowId) {
  const client = await auth.getClient(); // –û—Ç—Ä–∏–º—É—î–º–æ –∫–ª—ñ—î–Ω—Ç –¥–ª—è –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
  const sheets = google.sheets({ version: 'v4', auth: client });

  const res = await sheets.spreadsheets.values.get({
    spreadsheetId,
    range: `–ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è!A${rowId}:G${rowId}`, // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä—è–¥–∫–∞
  });

  const row = res.data.values[0]; // –û—Å—Ç–∞–Ω–Ω—ñ–π —Ä—è–¥–æ–∫ –∑ —Ç–∞–±–ª–∏—Ü—ñ
  const message = `‚ö†Ô∏è –û—Ñ–æ—Ä–º–ª–µ–Ω–æ –∑–∞–ø–∏—Ç ‚Ññ${rowId} –Ω–∞ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è.\n\n–ó—ñ —Å–∫–ª–∞–¥—É: ${row[2]}\n–ù–∞ —Å–∫–ª–∞–¥: ${row[3]}\n–ö–æ–¥ 1–°: ${row[4]}\n–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞: ${row[5]}\n–ö—ñ–ª—å–∫—ñ—Å—Ç—å: ${row[6]}\n\n`;

  const chatId = 7522288922; // –∞–±–æ –æ—Ç—Ä–∏–º—É—î—Ç–µ –∑ —ñ–Ω—à–æ—ó —Ç–∞–±–ª–∏—Ü—ñ

  bot.sendMessage(chatId, message, {
    reply_markup: {
      inline_keyboard: [
        [
          { text: '‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏', callback_data: 'confirm_' + rowId },
          { text: '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏', callback_data: 'cancel_' + rowId },
        ],
      ],
    },
  });
}
//<-----------------------------------------------------------------------------------------------------------

//------------------------ –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –ø—ñ—Å–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è + –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–µ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è + –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —Ç–∞–±–ª–∏—Ü—ñ + –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É ---------->
bot.on('callback_query', async (query) => {
  const data = query.data;
  const messageId = query.message.message_id;
  const chatId = query.message.chat.id;
  const rowId = data.split('_')[1];
  let newText = '';
  const firstName = query.from.first_name || '';
  const lastName = query.from.last_name || '';
  const userName = query.from.username || `${firstName} ${lastName}`.trim();

  if (data.startsWith('confirm_')) {
    newText = `‚úÖ –ó–∞–ø–∏—Ç ‚Ññ${rowId} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ`;
    await updateGoogleSheet(rowId, '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ', 'J', userName); // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –≤ Google –¢–∞–±–ª–∏—Ü—ñ
    await sendToOperator1C(rowId);
  } else if (data.startsWith('cancel_')) {
    newText = `‚ùå –ó–∞–ø–∏—Ç ‚Ññ${rowId} —Å–∫–∞—Å–æ–≤–∞–Ω–æ`;
    await updateGoogleSheet(rowId, '–°–∫–∞—Å–æ–≤–∞–Ω–æ', 'J', userName); // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –≤ Google –¢–∞–±–ª–∏—Ü—ñ
  } else if (data.startsWith('processed_')) {
    newText = `‚úÖ –ó–∞–ø–∏—Ç ‚Ññ${rowId} –ø—Ä–æ–≤–µ–¥–µ–Ω–æ`;
    await updateGoogleSheet(rowId, '–ü—Ä–æ–≤–µ–¥–µ–Ω–æ', 'K', userName); // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –≤ Google –¢–∞–±–ª–∏—Ü—ñ
  }

  try {
    await bot.editMessageText(newText, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: { inline_keyboard: [] }, // –í–∏–¥–∞–ª—è—î–º–æ –∫–Ω–æ–ø–∫–∏ —Ä–∞–∑–æ–º –∑ —Ç–µ–∫—Å—Ç–æ–º
    });
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', error);
  }
});
//<------------------------------------------------------------------------------------------------------
//------------------------------ –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –≤ —Ç–∞–±–ª–∏—Ü—ñ -------------------------------->

async function updateGoogleSheet(rowId, status, column, userName) {
  try {
    const sheets = google.sheets({ version: 'v4', auth });

    const spreadsheetId = '1JbQ8-VVoYAkSRAx5ssz7Yv2kbJDcZJ46TQdK6M58w8c';
    const updates = [
      { range: `–ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è!I${rowId}`, value: status },
      { range: `–ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è!${column}${rowId}`, value: userName },
    ];
    /*
    await sheets.spreadsheets.values.update({
      spreadsheetId,
      range,
      valueInputOption: 'RAW',
      resource: { values: [[status]] },
    });
*/
    for (const update of updates) {
      await sheets.spreadsheets.values.update({
        spreadsheetId,
        range: update.range,
        valueInputOption: 'RAW',
        resource: { values: [[update.value]] },
      });
    }

    console.log(`‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ —Ä—è–¥–æ–∫ ${rowId} —É —Å—Ç–æ–≤–ø—Ü—ñ H: ${status}`);
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è Google –¢–∞–±–ª–∏—Ü—ñ:', error);
  }
}

//<-------------------------------------------------------------------------------------------------------

// 7Ô∏è‚É£ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É 1–°
async function sendToOperator1C(rowId) {
  const client = await auth.getClient();
  const sheets = google.sheets({ version: 'v4', auth: client });

  const res = await sheets.spreadsheets.values.get({
    spreadsheetId,
    range: `–ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è!A${rowId}:H${rowId}`,
  });

  if (!res.data.values || res.data.values.length === 0) return;

  const row = res.data.values[0];
  const message = `–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ –∑–∞–ø–∏—Ç ‚Ññ${rowId}.\n\n–ó—ñ —Å–∫–ª–∞–¥—É: ${row[2]}\n–ù–∞ —Å–∫–ª–∞–¥: ${row[3]}\n–ö–æ–¥ 1–°: ${row[4]}\n–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞: ${row[5]}\n–ö—ñ–ª—å–∫—ñ—Å—Ç—å: ${row[6]}\n\n–û—á—ñ–∫—É—î –Ω–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è —É —Å–∏—Å—Ç–µ–º—ñ.`;

  const operators = await getOperators1C();
  //const operatorId = 7522288922;
  for (const operatorId of operators) {
    bot.sendMessage(operatorId, message, {
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚úÖ –ü—Ä–æ–≤–µ–¥–µ–Ω–æ', callback_data: 'processed_' + rowId }],
        ],
      },
    });
  }
}
getOperators1C().then((ids) => console.log('üìã –û—Ç—Ä–∏–º–∞–Ω—ñ ID –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤:', ids));

// 8Ô∏è‚É£ –û—Ç—Ä–∏–º–∞–Ω–Ω—è ID –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤ 1–°
async function getOperators1C() {
  const client = await auth.getClient();
  const sheets = google.sheets({ version: 'v4', auth: client });

  const res = await sheets.spreadsheets.values.get({
    spreadsheetId,
    range: `–û–ø–µ—Ä–∞—Ç–æ—Ä–∏ 1–°!B2:B`, // –¢—É—Ç —É —Å—Ç–æ–≤–ø—Ü—ñ A –º—ñ—Å—Ç—è—Ç—å—Å—è Telegram ID –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤ 1–°
  });

  if (!res.data.values) return [];

  return res.data.values.flat();
}
//<-------------------------------------------------------------------------------------------------------

/* –û–±—Ä–æ–±–Ω–∏–∫ –±—É–¥—å-—è–∫–æ–≥–æ —Ç–µ–∫—Å—Ç—É
bot.on('message', (msg) => {
  console.log(`–û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ ${msg.chat.id}: ${msg.text}`);
});
*/
